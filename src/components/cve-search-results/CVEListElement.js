import React, { useEffect, useContext } from 'react';
import {
  ListItem, Heading, Text, Divider, Flex, Stack, useToast, useBoolean,
} from '@chakra-ui/react';
import { useTranslation } from 'react-i18next';

import { BulletinContext } from '../../context/BulletinContext';

import Badge from '../../common/Badge';
import SuccessButton from '../../common/SuccessButton';
import ErrorButton from '../../common/ErrorButton';

const CVEListElement = (props) => {
  const { t } = useTranslation();
  const addToBulletinT = t('cve-search-results.add-to-bulletin');
  const removeFromBulletinT = t('cve-search-results.remove-from-bulletin');
  const publishDateT = t('cve-search-results.publish-date');
  const lastModificationDateT = t('cve-search-results.last-modification-date');
  const addedToBulletinT = t('cve-search-results.added-to-bulletin');
  const alreadyInBulletinT = t('cve-search-results.already-in-bulletin');
  const couldNotBeDeletedFromBulletinT = t('cve-search-results.could-not-be-deleted-from-bulletin');
  const removedFromBulletinT = t('cve-search-results.removed-from-bulletin');

  const { addCveToBulletin, removeCveFromBulletin, isCveInBulletin } = useContext(BulletinContext);
  const [isButtonDisabled, setButtonDisabled] = useBoolean(false);
  const toast = useToast();

  const {
    cveId, description, cvssV3Metric, lastModifiedDate, publishedDate,
  } = props;

  const handleAddToBulletin = () => {
    const addedToBulletin = addCveToBulletin(props);
    if (addedToBulletin) {
      toast({
        title: `${props.cveId} ${addedToBulletinT}`,
        status: 'success',
        duration: 2000,
        isClosable: true,
      });
      setButtonDisabled.on();
    } else {
      toast({
        title: `${props.cveId} ${alreadyInBulletinT}`,
        status: 'error',
        duration: 2000,
        isClosable: true,
      });
    }
  };

  const handleRemoveFromBulletin = () => {
    const removedFromBulletin = removeCveFromBulletin(props);
    if (removedFromBulletin) {
      toast({
        title: `${props.cveId} ${removedFromBulletinT}`,
        status: 'info',
        duration: 2000,
        isClosable: true,
      });
      setButtonDisabled.off();
    } else {
      toast({
        title: `${props.cveId} ${couldNotBeDeletedFromBulletinT}`,
        status: 'error',
        duration: 2000,
        isClosable: true,
      });
    }
  };

  useEffect(() => {
    if (isCveInBulletin(props)) setButtonDisabled.on();
  }, []);

  return (
    <ListItem key={cveId} p={4}>
      <Heading as="h4" size="md">{cveId}</Heading>
      <Badge cvssV3Metric={cvssV3Metric} mt={1} />
      <Flex flexDirection={['column', 'column', 'row']} alignItems="center">
        <Text fontSize="md" flexBasis={['unset', 'unset', '80%', '80%', '90%']} p={2}>
          {description}
        </Text>
        <Stack direction="column" spacing={2} mb={2}>
          <SuccessButton
            mt={[2, 2, 0]}
            p={2}
            flexBasis={['unset', 'unset', '20%', '20%', '10%']}
            disabled={isButtonDisabled}
            onClick={handleAddToBulletin}
          >
            {addToBulletinT}
          </SuccessButton>
          <ErrorButton
            mt={[2, 2, 0]}
            p={2}
            flexBasis={['unset', 'unset', '20%', '20%', '10%']}
            disabled={!isButtonDisabled}
            onClick={handleRemoveFromBulletin}
          >
            {removeFromBulletinT}
          </ErrorButton>
        </Stack>
      </Flex>
      <Flex fontSize="sm">
        <Flex flexBasis={['50%', '50%', 'unset']} justifyContent={['center', 'center', 'flex-start']}>
          <Text>
            {publishDateT}
            :
            {' '}
          </Text>
          <Text ml={1} fontWeight="bold">{publishedDate}</Text>
        </Flex>
        <Flex ml={[0, 0, 4]} flexBasis={['50%', '50%', 'unset']} justifyContent={['center', 'center', 'flex-start']}>
          <Text>
            {lastModificationDateT}
            :
            {' '}
          </Text>
          <Text ml={1} fontWeight="bold">{lastModifiedDate}</Text>
        </Flex>
      </Flex>
      <Divider />
    </ListItem>
  );
};

export default CVEListElement;
